import{u as e,_ as t,s as n,n as o,e as s,d as i,l as r,dh as a,x as l,t as d,S as c,di as p,f as h,aC as m,a7 as u,g,h as f,dj as b}from"./shell-c338c5d1.js";import{e as v,n as w}from"./ref-b59af351.js";import{o as k}from"./shreddit-comment-ced9e8a1.js";import"./icon-admin-c1d13d40.js";import"./icon-link-post-5b3b6513.js";import"./icon-user-e5d64e52.js";import{t as y}from"./comments-f0f2d4eb.js";import"./shreddit-spoiler-d19cac96.js";import"./faceplate-render-9ca8ec28.js";import"./shreddit-comment-badges-549b3a89.js";import"./mod-notes-opener-f9b566e8.js";import"./icon-overflow-horizontal-f91d3785.js";import"./deleteComment-e51d0de1.js";import"./requestGql-c41ad263.js";import"./comment-composer-host-080d6cdc.js";import"./rte-toolbar-button-emote-59822824.js";import"./mention-node-091c5351.js";import"./icon-delete-outline-e1037b7d.js";import"./icon-edit-outline-4e2e55ea.js";import"./upload-to-s3-b5278634.js";import"./faceplate-tooltip-bdcb2488.js";import"./composer-bc689e00.js";import"./faceplate-progress-a2608917.js";import"./telemetry-event-struct-d8880359.js";import"./translation-a5ff0928.js";import"./icon-admin-fill-4fbdea85.js";import"./icon-lock-fill-80e51467.js";import"./icon-pin-fill-68564ff2.js";const x=e(n);let P=class extends x{constructor(){super(...arguments),this.commentId="",this.parentCommentPermalink="",this.postPermalink="",this.isShredtopPDP=!1}static get styles(){return[i,r(".single-comment-thread-toolbar {\n  align-items: center;\n  display: flex;\n  flex-flow: row nowrap;\n  font: var(--font-title-h6);\n  justify-content: space-between;\n  padding: 0.5rem 1rem;\n}\n")]}firstUpdated(){this.updateComplete.then((()=>{const e=this.getBoundingClientRect().top;window.scrollTo({top:e-48,behavior:"auto"})}))}handleSeeFullDiscussionLink(){const e=document.querySelector("shreddit-post");e&&this.trackEvent(a(e))}render(){if(!this.commentId)return;const e="Single comment thread",t="no-underline hover:no-underline visited:no-underline "+(this.isShredtopPDP?"text-primary":"text-global-alienblue");return l`\n <div>\n <div \n class="single-comment-thread-toolbar ${this.isShredtopPDP?"text-neutral-content-weak":"text-tone-3"}" \n>\n ${this.parentCommentPermalink?l` <a href="${this.parentCommentPermalink}" class="${t}"> ${e} </a> `:l` <span>${e}</span> `}\n ${this.isShredtopPDP?l`<span class="flex-1 h-px mx-xs bg-tone-4" data-id="line"></span>`:""}\n <a \n href="${this.postPermalink}" \n class="${t}" \n @click="${this.handleSeeFullDiscussionLink}" \n>\n See full discussion\n </a>\n </div>\n </div>\n `}};t([o({type:String,attribute:"comment-id"})],P.prototype,"commentId",void 0),t([o({type:String,attribute:"parent-comment-permalink"})],P.prototype,"parentCommentPermalink",void 0),t([o({type:String,attribute:"post-permalink"})],P.prototype,"postPermalink",void 0),t([o({type:Boolean,attribute:"is-shredtop-pdp"})],P.prototype,"isShredtopPDP",void 0),P=t([s("shreddit-comments-page-tools")],P);const S=e(n);let C=class extends S{constructor(){super(...arguments),this.thingId="",this.subredditPrefixedName="",this.isTruncated=!1,this.isStaggered=!1,this.numStaggers=0,this.totalComments=0,this.isProfilePost=!1,this.isReportingEnabled=!1,this.isShredtopPDP=!1,this.permalink="",this.author="",this.isAuthorDeleted=!1,this.staggerReveals=0,this.overflowActionsMenuRef=v(),this.scrollBlocker=new c(this),this.handleCloseOverflowActionsMenu=()=>{this.overflowActionsMenuRef.value?.close(),document.documentElement.removeEventListener("click",this.handleCloseOverflowActionsMenu),this.scrollBlocker.unblockPageScrolling()}}static get styles(){return[i,r(":host {\n  display: block;\n  background-color: var(--shreddit-content-background);\n  padding-bottom: var(--spacer-xs);\n}\n.content {\n  position: relative;\n}\n.content.noOverflow {\n  overflow: hidden;\n}\n.content.truncated slot[name='truncated'] {\n  display: none;\n}\n.shadow {\n  background: linear-gradient(180deg, hsla(0, 0%, 100%, 0) 0%, var(--color-tone-7));\n  bottom: 0;\n  content: '';\n  left: 0;\n  pointer-events: none;\n  position: absolute;\n  right: 0;\n  height: 100px;\n}\n.expand-button {\n  background-color: var(--color-global-orangered);\n  border: none;\n  border-radius: 18px;\n  color: var(--color-tone-7);\n  display: block;\n  font-weight: 700;\n  height: 36px;\n  overflow: hidden;\n  padding: 0 12px;\n  text-align: center;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  width: calc(100% - 32px);\n  margin: 0 16px 8px;\n}\n"),r(p)]}connectedCallback(){super.connectedCallback(),this.addEventListener(k,this.handleOpenOverflowActionsMenu)}disconnectedCallback(){super.disconnectedCallback(),this.removeEventListener(k,this.handleOpenOverflowActionsMenu)}showAllComments(){this.isTruncated=!1,this.trackEvent(y())}showMoreComments(){this.staggerReveals+=1,this.trackEvent(y())}renderShredtopViewMoreCommentsButton(e){return h({attributes:{type:"button",className:"ml-sm xs:ml-0 font-semibold mt-md",onclick:e},appearance:"brand",shape:"pill",leadingIcon:m({size:u.Medium}),size:g.Small,children:"View more comments"})}renderTruncatedExpandButton(){return this.isShredtopPDP?this.renderShredtopViewMoreCommentsButton(this.showAllComments):l`\n <button class="expand-button" @click="${this.showAllComments}">\n \n View\n <faceplate-number number="${this.totalComments}" pretty></faceplate-number> More\n Comments\n \n </button>\n `}renderStaggeredExpandButton(){return this.staggerReveals<this.numStaggers?this.isShredtopPDP?this.renderShredtopViewMoreCommentsButton(this.showMoreComments):l`\n <button class="expand-button" @click="${this.showMoreComments}">\n View More Comments\n </button>\n `:l``}renderContent(){if(this.isStaggered){const e=[l`<slot name="staggered_1"></slot>`,l`<slot name="staggered_2"></slot>`,l`<slot name="staggered_3"></slot>`],t=this.staggerReveals>=this.numStaggers?e:e.slice(0,this.staggerReveals);return l`<div \n class="${f({content:!0,truncated:this.staggerReveals<this.numStaggers})}" \n>\n <slot></slot>\n ${t}\n </div>`}return l`\n <div \n class="${f({content:!0,truncated:this.isTruncated,noOverflow:!this.isShredtopPDP})}" \n>\n <slot></slot>\n ${this.isTruncated&&!this.isShredtopPDP?l`<div class="shadow"></div>`:l`<slot name="truncated"></slot>`}\n </div>\n `}renderExpandButton(){return this.isTruncated?this.isStaggered?this.renderStaggeredExpandButton():this.renderTruncatedExpandButton():""}render(){return l`\n ${this.renderContent()}\n <faceplate-dialog \n ${w(this.overflowActionsMenuRef)}\n class="overflow-actions-dialog" \n @click="${this.handleCloseOverflowActionsMenu}" \n>\n <faceplate-screen-reader-content id="overflow-actions-menu-label">\n Additional comment actions\n </faceplate-screen-reader-content>\n <ul class="overflow-actions-menu" aria-labelledby="overflow-actions-menu-label">\n <li>\n <a href="${this.permalink}">\n <icon-link-post aria-hidden="true" class="overflow-actions-icon"></icon-link-post>\n Share\n </a>\n </li>\n ${this.isProfilePost?"":l`\n <li>\n <a href="/${this.subredditPrefixedName}/">\n <icon-admin aria-hidden="true" class="overflow-actions-icon"></icon-admin>\n More from ${this.subredditPrefixedName}\n </a>\n </li>\n `}\n ${this.isAuthorDeleted?"":l`<li>\n <a href="/user/${this.author}/">\n <icon-user aria-hidden="true" class="overflow-actions-icon"></icon-user> ${this.author}'s profile\n </a>\n </li>`}\n ${this.isReportingEnabled?l`<li>\n <shreddit-overflow-report \n thingId="${this.thingId}" \n type="${b.COMMENT}" \n></shreddit-overflow-report>\n </li>`:""}\n <button \n class="button button-small button-plain block bg-tone-6 text-tone-3 mt-[10px] mx-auto mb-0 w-[calc(100%-20px)] max-w-full" \n>\n Close\n </button>\n </ul>\n </faceplate-dialog>\n ${this.renderExpandButton()}\n `}handleOpenOverflowActionsMenu({detail:{author:e,isAuthorDeleted:t,permalink:n,thingId:o}}){this.author=e,this.isAuthorDeleted=t,this.permalink=n,this.thingId=o,this.overflowActionsMenuRef.value?.showModal(),document.documentElement.addEventListener("click",this.handleCloseOverflowActionsMenu),this.scrollBlocker.blockPageScrolling()}};t([o({type:String})],C.prototype,"thingId",void 0),t([o({type:String,attribute:"subreddit-prefixed-name"})],C.prototype,"subredditPrefixedName",void 0),t([o({type:Boolean})],C.prototype,"isTruncated",void 0),t([o({type:Boolean})],C.prototype,"isStaggered",void 0),t([o({type:Number})],C.prototype,"numStaggers",void 0),t([o({type:Number})],C.prototype,"totalComments",void 0),t([o({type:Boolean})],C.prototype,"isProfilePost",void 0),t([o({type:Boolean,attribute:"is-reporting-enabled"})],C.prototype,"isReportingEnabled",void 0),t([o({type:Boolean,attribute:"is-shredtop-pdp"})],C.prototype,"isShredtopPDP",void 0),t([d()],C.prototype,"permalink",void 0),t([d()],C.prototype,"author",void 0),t([d()],C.prototype,"isAuthorDeleted",void 0),t([d()],C.prototype,"staggerReveals",void 0),C=t([s("shreddit-comment-tree")],C);
//# sourceMappingURL=comment-forest-client-js-aa33085f.js.map
